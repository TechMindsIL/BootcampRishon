<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map Screen</title>

    <!-- Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

    <!-- CSS of Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <!-- CSS of Leaflet Routing Machine -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />

    <style>
        body {
            text-align: center;
        }

        #map {
            height: 500px;
            width: 70%;
            margin: 0 auto;
        }

        .icons {
            width: 35%;
            margin: 8px;
        }

        i {
            font-size: 24px;
            margin: 0 4px;
            cursor: pointer;
        }

        #toggleListView {
            margin: 15px auto;
            padding: 10px 20px;
            font-size: 18px;
            background-color: #f8f9fa;
            border: 1px solid black;
            color: black;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        }

        #toggleListView:hover {
            color: white;
            background-color: black;
            opacity: 80%;
        }
    </style>
</head>

<body>
    <h1>שם האימון </h1>

    <div class="icons" style="align-self: flex-end;">
        <i class="fa fa-share-alt" aria-hidden="true"></i>
        <i class="far fa-star" aria-hidden="true"></i>
    </div>

    <div id="map"></div>
    <button id="toggleListView" onclick="window.location.href='http://localhost:8080/list/'">הצגה ברשימה</button>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <script>
        const urlParams = new URLSearchParams(window.location.search);
        let ID = urlParams.get("id");

        if (!ID) {
            ID = "67123caa24d5ef0a8ab8377c";
            window.history.replaceState({}, '', `${window.location.pathname}?id=${ID}`);
        }

        const PROTOCOL = window.location.protocol
        const URL = `${PROTOCOL}/api/v1/routes/${ID}`

        console.log("Initializing map...");
        const map = L.map('map').setView([31.95966273043602, 34.80208048694831], 12);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        console.log("Map initialized");

        const fetchRoute = async () => {
            try {
                console.log("Fetching route data...");
                const response = await fetch(URL)
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json()
                console.log("Route data fetched:", data);
                return data
            } catch(err) {
                console.error("Fetch error:", err)
                return null
            }
        }

        const addRouteToMap = async() => {
            const route = await fetchRoute();

            if (!route || !route.places || route.places.length === 0) {
                console.error("Invalid route data");
                return;
            }

            document.querySelector('h1').textContent = route.name;

            console.log("Adding markers and route to map...");
            const waypoints = route.places.map(place => {
                const latLng = L.latLng(place.coordinates.latitude, place.coordinates.longitude);
                L.marker(latLng).addTo(map).bindPopup(place.name);
                return latLng;
            });

            console.log("Waypoints:", waypoints);

            if (waypoints.length > 1) {
                const polyline = L.polyline(waypoints, {color: 'blue', weight: 4, opacity: 0.6}).addTo(map);

                const distancesAndTimes = waypoints.slice(0, -1).map((wp, index) => {
                    const from = waypoints[index];
                    const to = waypoints[index + 1];
                    const distance = from.distanceTo(to);
                    const time = distance / 1.4; // Assuming average walking speed of 1.4 m/s
                    return {
                        distance: distance,
                        time: time,
                        from: route.places[index].name,
                        to: route.places[index + 1].name
                    };
                });

                sessionStorage.setItem('routeDistancesAndTimes', JSON.stringify(distancesAndTimes));
                console.log("Route information stored in session storage");

                // Fit the map to the route bounds
                map.fitBounds(polyline.getBounds());
            } else {
                console.log("Not enough waypoints to create a route");
            }
        }

        addRouteToMap();

        document.getElementById("toggleListView").addEventListener("click", function () {
            window.location.href = `/list?id=${ID}`;
        });
    </script>
</body>
</html>
