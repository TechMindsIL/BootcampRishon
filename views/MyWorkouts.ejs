<!DOCTYPE html>
<html lang="he" dir="ltr">
<%- include('partials/insidenavbar') %>

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>רשימת אימונים</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.4/axios.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <style>
      @import url("https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600;700&display=swap");

      body {
        font-family: "Rubik", sans-serif;
        background: linear-gradient(135deg,
            #fff0e6 0%,
            #fff 100%);
        /* רקע חם יותר */
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }

      .content {
        flex: 1;
        direction: rtl;
      }

      .header-title {
        color: white;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
      }

      .glass-effect {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(15px);
        border: 1px solid rgba(249, 115, 22, 0.2);
        box-shadow: 0 4px 6px rgba(249, 115, 22, 0.1);
      }

      header {
        background: linear-gradient(90deg, #f97316 0%, #fb923c 100%);
        color: white;
        box-shadow: 0 2px 10px rgba(249, 115, 22, 0.2);
      }

      .header-title {
        color: white;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
      }

      .workout-card {
        transition: all 0.3s ease;
        border: 2px solid rgba(249, 115, 22, 0.2);
        border-radius: 12px;
        overflow: hidden;
      }

      .workout-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(249, 115, 22, 0.25);
        border-color: #f97316;
      }

      .gradient-overlay {
        background: linear-gradient(180deg,
            rgba(249, 115, 22, 0.2) 0%,
            rgba(0, 0, 0, 0.8) 100%);
      }

      .active-nav-item {
        color: #fed7aa;
        /* גוון כתום בהיר יותר */
        font-weight: 500;
      }

      .active-nav-item::after {
        content: "";
        position: absolute;
        bottom: -4px;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #f97316, #fed7aa);
        border-radius: 4px;
      }

      .orange-gradient {
        background: linear-gradient(135deg, #f97316 0%, #fed7aa 100%);
        box-shadow: 0 4px 12px rgba(249, 115, 22, 0.3);
      }

      .stats-card {
        background: linear-gradient(135deg, #fff5eb 0%, #fff 100%);
        border: 2px solid #ffedd5;
        box-shadow: 0 4px 6px rgba(249, 115, 22, 0.1);
      }

      h2,
      h3 {
        color: #ea580c;
        /* כתום כהה יותר לכותרות */
        font-weight: 600;
      }

      button {
        background: linear-gradient(90deg, #f97316 0%, #fb923c 100%);
        color: white;
        border: none;
        border-radius: 0.6rem;
        padding: 0.6rem 1.2rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(249, 115, 22, 0.2);
      }

      button:hover {
        background: linear-gradient(90deg, #fb923c 0%, #fdba74 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(249, 115, 22, 0.3);
      }

      /* אנימציות משופרות */
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(15px);
        }

        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .animate-fade-in {
        animation: fadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }

      /* הוספת אפקטים נוספים */
      .hover-scale {
        transition: transform 0.3s ease;
      }

      .hover-scale:hover {
        transform: scale(1.02);
      }

      .orange-border-focus:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.3);
      }
    </style>
  </head>

  <body class="bg-gray-50">
    <div id="app" class="flex flex-col min-h-screen">
      <div class="max-w-5xl mx-auto px-4 py-4 flex justify-between items-center">
      </div>
      <div class="content">
        <main class="flex-1 max-w-5xl mx-auto w-full px-4 py-6 space-y-6">
          <!-- Hero Section -->
          <div class="relative rounded-2xl overflow-hidden h-72 shadow-lg">
            <div class="absolute inset-0 gradient-overlay"></div>
            <div class="absolute bottom-0 right-0 p-6 text-white">
              <!-- <p class="text-sm uppercase tracking-wider mb-2">ברוך שובך</p> -->
              <h2 class="text-3xl font-bold mb-1">מוכן לאימון הבא שלך?</h2>
            </div>
          </div>
          <!-- Workouts List -->
          <div class="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-xl font-bold text-gray-800">האימונים שלי</h2>
            </div>
            <div id="workoutList" class="space-y-4"></div>
          </div>
        </main>
      </div>
      <script>
        let workouts = [];
        async function fetchSavedRoutes() {
          try {
            const PROTOCOL = window.location.protocol;
            const response = await fetch(`${PROTOCOL}/api/v1/savedRoutes`);
            if (!response.ok) throw new Error("Network response was not ok");
            return await response.json();
          } catch (error) {
            console.error("Error fetching saved routes:", error);
            return [];
          }
        }
        function renderWorkoutList(workouts) {
          const workoutListElement = document.getElementById("workoutList");
          if (workouts.length === 0 || !workouts) {
            // אם המערך ריק, הצג הודעה שאין אימונים שמורים
            workoutListElement.innerHTML = `
            <div class="text-center text-gray-500 p-4">
                  עדין לא שמרת אימונים
            </div>
        `;
          } else {
            workoutListElement.innerHTML = workouts
              .map(
                (workout, index) => {
                  let bgImage = "/images/third-bg.png"; // ברירת מחדל

                  // סינון התמונות לפי סוג האימון
                  if (workout.name.includes("כח") && !workout.name.includes("אופניים")) {
                    bgImage = "/images/first-bg.png";
                  } else if (!workout.name.includes("כח") && workout.name.includes("אופניים")) {
                    bgImage = "/images/sec-bg.png";
                  }

                  // יצירת הכרטיס עם הרקע המותאם
                  return `
                    <div class="workout-card rounded-xl p-4 border border-gray-100 hover:border-orange-200 transition-all animate-fade-in" 
                      style="animation-delay: ${index * 100}ms; background-image: url(${bgImage}); background-size: cover; background-position: center; height: 100%; cursor: pointer;" 
                      onclick="handleWorkoutClick('${workout._id}')">
                      <div class="flex justify-between items-center">
                          <div class="flex items-center gap-4">
                              <div data-id="${workout._id}" id="FavoriteWorkout,${workout._id}" class="w-12 h-12 rounded-xl bg-orange-100 flex items-center justify-center">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z" clip-rule="evenodd" />
                                  </svg>
                              </div>
                              <div>
                                  <h3 class="font-medium text-gray-900">${workout.name || "שם לא זמין"
                    }</h3>
                                  <div class="flex items-center gap-3 text-sm text-gray-600">
                                    <span>${workout.duration ? `${workout.duration} דקות` : "משך לא זמין"}</span>
                                    <span class="w-1 h-1 rounded-full bg-gray-300"></span>
                                    <span>${workout.distance ? `${workout.distance} ק"מ` : "מרחק לא זמין"}</span>
                                  </div>
                              </div>
                          </div>
                          <div class="flex items-center gap-2">
                              <button onclick="toggleWorkoutDetails('${workout._id
                    }')" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
                                      <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z" />
                                  </svg>
                              </button>
                              <button onclick="removeWorkout('${workout._id
                    }')" class="p-2 hover:bg-red-50 rounded-lg transition-colors">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                                      <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                  </svg>
                              </button>
                          </div>
                      </div>
                  </div>
              `;
                })
              .join("");
          }
        }
        async function toggleWorkoutDetails(workoutId) {
          event.stopPropagation();
          try {
            const isAlreadySaved = await isSavedRoute(workoutId);
            const workout = workouts.find((w) => w._id === workoutId);
            const result = await Swal.fire({
              title: workout.name,
              html: `
                        <div class="text-right">
                            <p class="mb-2"><strong>משך:</strong> ${workout.duration
                }</p>
                            <p class="mb-2"><strong>מרחק:</strong> ${workout.distance
                }</p>
                            <p class="mb-4"><strong>סטטוס:</strong> ${isAlreadySaved ? "שמור" : "לא שמור"
                }</p>
                        </div>
                    `,
              showCancelButton: true,
              confirmButtonColor: "#F97316",
              cancelButtonColor: "#6B7280",
              confirmButtonText: isAlreadySaved ? "הסר מהשמורים" : "שמור מסלול",
              cancelButtonText: "סגור",
              reverseButtons: true,
            });
            if (result.isConfirmed) {
              if (isAlreadySaved) {
                await removeSavedRoute(workoutId);
              } else {
                await addSavedRoute(workoutId);
              }
              await refreshWorkouts();
            }
          } catch (error) {
            console.error("Error in toggleWorkoutDetails:", error);
            Swal.fire({
              icon: "error",
              title: "שגיאה",
              text: "אירעה שגיאה בעת עיבוד הבקשה",
            });
          }
        }
        async function isSavedRoute(workoutId) {
          try {
            const savedRoutes = await fetchSavedRoutes();
            return savedRoutes.some((route) => route._id === workoutId);
          } catch (error) {
            console.error("Error checking saved route:", error);
            return false;
          }
        }
        async function refreshWorkouts() {
          try {
            workouts = await fetchSavedRoutes();
            renderWorkoutList(workouts);
          } catch (error) {
            console.error("Error refreshing workouts:", error);
            Swal.fire({
              icon: "error",
              title: "שגיאה",
              text: "א��רעה שגיאה בטעינת האימונים",
            });
          }
        }
        function showNotification(message) {
          const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true,
            didOpen: (toast) => {
              toast.addEventListener("mouseenter", Swal.stopTimer);
              toast.addEventListener("mouseleave", Swal.resumeTimer);
            },
          });
          Toast.fire({
            icon: "info",
            title: message,
          });
        }
        async function removeWorkout(workoutId) {
          event.stopPropagation();
          const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
          });
          Swal.fire({
            title: "האם אתה בטוח?",
            text: "לא תוכל לשחזר את האימון לאחר המחיקה!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#F97316",
            cancelButtonColor: "#6B7280",
            confirmButtonText: "כן, מחק!",
            cancelButtonText: "ביטול",
            reverseButtons: true,
          }).then((result) => {
            if (result.isConfirmed) {
              // const workout = workouts.find((w) => w._id === workoutId);
              // workout.deleted = true; // Mark workout as deleted
              // renderWorkoutList(workouts);
              deleteRoute(workoutId)
                .then(() => {
                  Toast.fire({
                    icon: "success",
                    title: "האימון נמחק בהצלחה",
                  });
                  init();
                })
                .catch((error) => {
                  Toast.fire({
                    icon: "error",
                    title: "הייתה בעיה במחיקת האימון",
                  });
                });
            }
          });
        }

        const deleteRoute = async (routeId) => {
          try {
            const response = await fetch(`/api/v1/savedRoutes/${routeId}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
              },
            });
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || "Failed to delete route");
            }
            const updatedSavedRoutes = await response.json();
            console.log("Route deleted successfully:", updatedSavedRoutes);
          } catch (error) {
            console.error("Error deleting route:", error);
          }
        };


        async function init() {
          // Add loading animation
          const workoutList = document.getElementById("workoutList");
          workoutList.innerHTML = `
                <div class="flex justify-center items-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
                </div>
            `;
          workouts = await fetchSavedRoutes();
          renderWorkoutList(workouts);
          document.documentElement.style.scrollBehavior = "smooth";
        }
        function handleWorkoutClick(workoutId) {
          window.location.href = `/map/?id=${workoutId}`
          console.log("Workout clicked:", workoutId);
        }
        init();
      </script>
  </body>

</html>