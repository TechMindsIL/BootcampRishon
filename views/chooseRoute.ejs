<%- include('./partials/head') %>

    <%- include('./partials/navbar', { currentPage: 'register' }) %>
        <style>
            /* CSS variables for responsiveness */
            :root{
                --cardsInRow: 4;
                --mainPadding: 17%;
                --cardPadding: 0.7rem;
            }

            /* layout and spacing */
            .mainContent{
                width: 100%;
                padding: 0 var(--mainPadding);
            }
            .cardPadding{
                padding: var(--cardPadding);
                width: calc(100% / var(--cardsInRow));
                flex-shrink: 0;
                height: 160px;

            }
            .categoryContainer{
                margin-top: 10px;
                width: 100%;
                margin-right: auto;
                margin-left: auto;
            }

            .card {
                cursor: pointer;
                border:none;
                background: #d9d9d9; /* the color from the design page */
                border-radius: 20px;

                width: 100%;
                height: 100%;

                display:flex;
                justify-content: center;
                text-align: center;
                align-content: center;
            }

            .card-title{
                padding: 25px;
                font-size:1.5em;
                display: inline;
                word-wrap: normal;
            }

            .cardContainer{                
                display: flex;
                flex-direction: row-reverse;
                flex-wrap: nowrap; 
                overflow-x: scroll; 
                overflow-y: hidden; 
                width: 100%;
            }

            /* uncategorized Styling */
            .text-end{
                padding: 0 0.7em;
                font-size: 1.5em;
                margin-bottom: calc(0 - var(--cardPadding));
                font-weight: bold;
            }

            .centered-text{
                margin-top: 50px;
                text-align: center;
            }
            .invisibleText {
                display: none;
            }
            
            /* Scrollbar styles */

            .cardContainer::-webkit-scrollbar {
                height: 8px;
            }

            .cardContainer::-webkit-scrollbar-track {
                background: transparent;
            }

            .cardContainer::-webkit-scrollbar-thumb {
                background-color: #818B99;
                border-radius: 10px;
            }

            .cardContainer::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

            /* tags section */
            #allTagsSection {
                display: none;
                /* Initially hidden */
                overflow-x: auto;
                height: 100px;

                /* Set initial height to 0 */
                opacity: 0;
                /* Set initial opacity to 0 */
                transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;
                /* Smooth transition */
            }

            #allTagsSection.show {
                display: block;
                max-height: 800px;
                /* Max height large enough to contain the content */
                opacity: 1;
                /* Fully visible */
            }
            
            /* Icons */
            #search-icon{
                padding: 15px;
                border: none;
                background: transparent;
            }
            .bi-filter{
                font-size: 3em;
                align-self: center;
                margin: 5px 0;
            }
            .bi-search{
                font-size: 1.6em;
            }
            
            /* Search Bar */
            .search {
                background: #efefef; /*color in the design sheet*/
                position: relative;
                display: flex;
                flex-wrap: wrap;
                align-items: stretch;
                width: 100%;
                border-radius: 20px;
                border: 1px solid #c6c6c6; /* color in the design sheet */
            }
            .searchForm{
                width: 50%;
            }
            input[type=text]{
                text-align: left;
                width: 70%;
                box-sizing: border-box;
                border: none;
                background-color: transparent;
                color: black;
                margin: 0;
                flex-grow: 1;
            }
            input[type=text]:focus {
                outline: none;
                box-shadow: none;
                background-color: transparent;
            }
            
            /* Responsiveness */
            @media (max-width: 1400px){
                :root{
                    --cardsInRow: 3
                }
            }

            @media (max-width: 1200px){
                :root{
                    --mainPadding: 15%
                }
                .card-title{
                    padding: 15px;
                    font-size:1.3em;
                }
                .searchForm{
                    width: 60%;
                }
            }

            @media (max-width: 1000px){
                :root{
                    --mainPadding: 13%;
                    --cardPadding: 0.4rem
                }
                .card-title{
                    font-size:1.2em;
                }
                .searchForm{
                    width: 65%;
                }
            }

            @media (max-width: 800px){
                :root{
                    --mainPadding: 11%
                }
                .card-title{
                    font-size:1.1em;
                }
                .searchForm{
                    width: 70%;
                }
            }

            @media (max-width: 600px){
                :root{
                    --cardsInRow: 2;
                    --cardPadding: 0.3rem
                }
                .card-title{
                    font-size:1.1em;
                }
                .searchForm{
                    width: 100%;
                }
            }


        </style>

        <body onload="init()">
            <header>
                <div class="container mt-3">
                    <h1 class=" text-center  ">כל האימונים</h1>
                </div>
            </header>
            <main class="mainContent mt-4">
                <!-- Search Form -->
                <form onsubmit="searchSumbit(event)" class="mx-auto d-flex justify-content-center searchForm">
                    <i class="bi bi-filter" id="toggleTags" style="cursor: pointer;"></i>
                    <div class="search">
                        <span onclick="searchSumbit(event)" id="search-icon"><i class="bi bi-search"></i></span>
                        <input id="inputId" type="text" placeholder="Search..." aria-describedby="search-icon">
                    </div>
                </form>

                <!-- AllTags partial will be hidden initially -->
                <div id="allTagsSection" style="display: none;">
                    <%- include('./partials/allTags', { currentPage: 'register' }) %>
                </div>

                <div id="all">
                
                </div>
            </main>

        </body> 

<script>
    // elements & data save
    const allContainer = document.getElementById("all");
    const allTagsSection = document.getElementById("allTagsSection");
    const toggleIcon = document.getElementById("toggleTags");

    let fetchedRoutes = [];

    // utility
    const showAllTags = () => {
        if (allTagsSection.classList.contains("show")) {
            allTagsSection.classList.remove("show"); // Hide the allTags section
            setTimeout(() => (allTagsSection.style.display = "none"), 300); // Wait for animation to complete before hiding
        } else {
            allTagsSection.style.display = "block"; // Show the allTags section
            setTimeout(() => allTagsSection.classList.add("show"), 10); // Allow display to apply before starting transition
        }
    }

    const displayTitles = (show) => {
        const titles = document.getElementsByClassName("text-end")
        for(const title of titles){
            if(!show){
                title.classList.add("invisibleText")
            }else{
                title.classList.remove("invisibleText")
            }
        }
    }

    // events
    toggleIcon.addEventListener("click", showAllTags);

    const searchSumbit = (e) => {
        e.preventDefault(); // Prevent form submission
        populateBySearch();
    };


    const populateFilteredResults = (filteredTrainings) => {
        allContainer.innerHTML = ""; // Clear previous results

        filteredTrainings.forEach((training, index) => {
            const div = document.createElement("div");
            div.style.cursor = "pointer";
            div.onclick = () => {
                window.location.href = `/map/?id=${training._id}`;
            };

            
            div.className = "col-4 p-3";
            div.innerHTML = `
                <div class="card">
                    <h5 class="card-title">${training.name}</h5>
                </div>
            `;
            allContainer.appendChild(div);
        });
    };

    const categories = {
        search: {
            filter: (data, searchValue) => data.filter((route) => route.name.toLowerCase().includes(searchValue)).sort((a, b) => a.length < b.length),
            name: ""
        },
        strength: {
            filter: (data) => {  
                return data.filter((route) => {
                    return  route.name.includes("כח") &&
                        !route.name.includes("אופניים")
                })
            },
            name: "אימוני כוח"
        },
        bicycle: {
            filter: (data) => data.filter((route) => route.name.includes("אופניים")),
            name: "אימונים עם אופניים"
        },
        suggestions: {
            filter: (data) => data, //.slice(0, 3),
            name: "הצעות בשבילך" 
        },
        tags: {
            filter: (filterTag) => {
                return fetchedRoutes.filter(training => {
                    for (const tag of training.tags){
                        if(filterTag._id === tag._id){
                            return true
                        }
                    }
                    return false
                })
            },
            name: ""
        }
    };

    const makeCards = (routes, container) => {
        for(const route of routes){
            const div = document.createElement("div");

            div.classList.add("cardPadding");

            div.onclick = () => {
                window.location.href = `/map/?id=${route._id}`;
            };

            div.innerHTML = `
                <div class="card">
                    <h5 class="card-title">${route.name}</h5>
                </div>
            `;
            container.appendChild(div); // Add the newly created div to the DOM
        }
    }

    const makeDiv = (category) => {
        const container = document.createElement("div");
        container.className = "categoryContainer"

        const h2 = document.createElement("h2");
        h2.className = "text-end"; 
        h2.textContent = categories[category].name;

        const cardContainer = document.createElement("div");
        cardContainer.id = category;
        cardContainer.className = "cardContainer"; 

        container.appendChild(h2);
        container.appendChild(cardContainer);

        allContainer.appendChild(container);
        return cardContainer
    }

    // Populate Suggestions section
    const populateDataDefault = () => {
        allContainer.classList = ""
        allContainer.innerHTML = "" 

        for(const category of Object.keys(categories)) {
            const filteredData = categories[category].filter(fetchedRoutes)

            const container = makeDiv(category)
            makeCards(filteredData, container)
        }
    };

    // Get search input value and filter the data
    const populateBySearch = () => {
        const searchValue = document.querySelector("#inputId").value.toLowerCase();
        if(searchValue === ""){
            populateDataDefault()
            return;
        }
        
        allContainer.innerHTML = "" 
        allContainer.classList = "row justify-content-s flex-row-reverse"
        displayTitles(false)

        const filteredData = categories.search.filter(fetchedRoutes, searchValue)
        if(filteredData.length){
            makeCards(filteredData, allContainer)
            return;
        }

        allContainer.innerHTML = `
            <h1 class="centered-text">לא נמצאו תוצאות חיפוש</h1>
        `
    };

    const filterByTag = (filterTag) => {
        const filteredData = categories.tags.filter(filterTag);

        allContainer.innerHTML = "" 
        allContainer.classList = "row justify-content-s flex-row-reverse"

        if(filteredData.length){
            makeCards(filteredData, allContainer)
            return;
        }

        allContainer.innerHTML = `
            <h1 class="centered-text">לא נמצאו תוצאות חיפוש</h1>
        `
    }

    // Function to fetch data from the API
    const fetchRoutes = async () => {
        try{
            const response = await fetch("/api/v1/routes");

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            fetchedRoutes = await response.json();
            return true // Success
        } catch(err){
            console.error("Couldn't fetch routes data:", error);
        }
    };

    // Function to initialize the page and fetch data
    const init = async () => {
        await fetchRoutes(); // wait for data to be fetched

        populateDataDefault();
    };

    // Call init function when the page loads
    window.onload = init;
</script>