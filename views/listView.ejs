<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %> <%- include('partials/insidenavbar') %>

    <head>
      <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=hotel_class" />

      <style>
        body {
          margin-top: 100px;
        }

        .listCenter {
          display: flex;
          justify-content: center;
          align-items: center;
          text-align: center;
        }

        :root {
          --pinSize: 35px;
          --cardSpacing: 40px;
          --cardHeight: 60px;

          --lineContainerWidth: 100px;
          --placeListWidth: 310px;

          --grayColor: #6c6c6c;
          --btnColor: #f16624;
          --lineColor: #cccccc;
          --textFont: 1.4em;
          --offsetWidth: 100px;
        }

        .listContainer {
          width: calc(var(--placeListWidth) + var(--lineContainerWidth) + var(--offsetWidth) + var(--pinSize) / 2);
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
        }

        .place {
          position: relative;
          display: flex;
          flex-direction: row;
          align-items: center;
          justify-content: space-between;
          width: 100%;
          margin-bottom: var(--cardSpacing);
          margin-top: 20px;
        }

        .place:hover {
          cursor: pointer;
        }

        .card-p:hover {
          transform: scale(1.05);
        }

        .place.expanded {
          margin-top: 10px;
          margin-bottom: 10px;
        }

        .linecontainer {
          width: var(--lineContainerWidth);
          position: absolute;
          top: calc(50% + var(--pinSize) / 2);
          left: calc(100% - var(--pinSize) / 2 - 1.5px);
          display: flex;
          flex-direction: row;
          align-items: center;
          height: calc(var(--cardSpacing) + var(--cardHeight) - var(--pinSize));
        }

        .line {
          width: 3px;
          background-color: var(--lineColor);
          height: 100%;
        }

        .card-p {
          text-align: center;
          display: flex;
          justify-content: center;
          align-content: center;
          align-items: center;
          width: calc(var(--placeListWidth) - 60px);
          height: auto;
          min-height: var(--cardHeight);
          border-radius: 20px;
          background-color: var(--grayColor);
          padding: 5px 5px;
        }

        .card-p.completed {
          background-color: var(--btnColor) !important;
        }

        .locationPin {
          width: var(--pinSize);
          height: var(--pinSize);
          z-index: 2;
        }

        .textInside {
          width: 90%;
          height: auto;
          text-align: center;
          font-size: var(--textFont);
          font-weight: 500;
          margin: 0;
          color: black;
        }

        .distanceText {
          text-align: left;
          direction: rtl;
          margin-left: 20px;
          width: 100px;
          font-size: 100%;
          font-weight: 400;
        }

        .places {
          margin-top: 30px;
          width: var(--placeListWidth);
        }

        .placeHeader {
          direction: rtl;
          font-size: 1.5em;
          margin-right: calc(0px - 1 * var(--pinSize));
          font-weight: 400;
        }

        .button:hover {
          background-color: hsl(19, 88%, 45%);
          color: white;
        }

        .buttons {
          margin-top: 50px;
          margin-bottom: 100px;
          display: flex;
          justify-content: center;
          flex-wrap: wrap;
          gap: 15px;
        }

        .button {
          /* margin-top: 50px; */
          width: 200px;
          background-color: var(--btnColor);
          /* margin-bottom: 100px; */
        }

        @media screen and (max-width: 500px) {
          :root {
            --placeListWidth: 270px;
            --cardHeight: 55px;
            --textFont: 1.2em;
            --offsetWidth: 70px;
            --lineContainerWidth: 80px;
          }

        }

        @media screen and (max-width: 440px) {
          :root {
            --placeListWidth: 250px;
            --cardHeight: 50px;
            --textFont: 0.9em;
            --offsetWidth: 40px;
            --cardSpacing: 30px;
          }

        }

        @media screen and (max-width: 400px) {
          :root {
            --placeListWidth: 220px;
            --cardHeight: 45px;
            --textFont: 0.8em;
            --offsetWidth: 30px;
            --cardSpacing: 30px;
          }

          .distanceText {
            font-size: 95%;
          }
        }

        @media screen and (max-width: 360px) {
          :root {
            --placeListWidth: 197px;
            --cardHeight: 50px;
            --textFont: 0.8em;
            --offsetWidth: 10px;
            --cardSpacing: 20px;
          }
        }

        #name {
          text-align: center;
        }

        .completed {
          background-color: var(--btnColor) !important;
        }

        .completeButton {
          background-color: #ccc;
          border: none;
          border-radius: 12px;
          padding: 10px 20px;
          color: black;
          font-size: 14px;
          cursor: pointer;
          transition: background-color 0.3s ease, transform 0.2s ease;
          margin-right: 15px;
        }

        .completeButton:hover {
          background-color: #bbb;
          transform: scale(1.05);
        }

        .completeButton.active {
          background-color: transparent;
          border: none;
        }

        .completionIcon {
          display: none;
        }

        .completeButton.active .completionIcon {
          display: inline-block;
          color: var(--btnColor);
          font-size: 20px;
          margin-left: 10px;
        }

        .completeButton .completionIcon {
          background: none;
        }

        .completeButton.active .buttonText {
          display: none;
        }

        .details {
          margin-bottom: 0px;
          margin-top: 0px;
          padding: 10px;
          border-top: 1px solid #ccc;
          border-radius: 20px;
          background-color: var(--lineColor);
          text-align: center;
          position: relative;
          z-index: 10;
        }

        .place-image {
          width: 100%;
          max-width: 300px;
          height: auto;
          margin-top: 10px;
        }

        .place-video {
          width: 100%;
          max-width: 300px;
          height: auto;
          margin-top: 10px;
        }

        @media (max-width:550px) {
          .rating-section {
            gap: 5px !important;
            justify-content: flex-end !important;
          }
        }

        .rating-section {
          display: flex;
          flex-direction: row-reverse;
          justify-content: flex-end;
          gap: 15px;
          flex-wrap: wrap;
        }

        .div-average-rating {
          display: flex;
          justify-content: flex-start;
          align-items: center;
          gap: 10px;
        }

        .rating-container {
          display: flex;
          align-items: center;
          gap: 10px;
        }

        .stars-container {
          display: flex;
          gap: 5px;
        }

        .star {
          font-size: 30px;
          cursor: pointer;
        }

        .rate-button {
          font-size: 20px;
          cursor: pointer;
          background-color: #f16624;
          border-radius: 14px;
          padding: 0px 5px;
          text-align: center;
          border: none;
        }

        .material-symbols-outlined {
          vertical-align: sub;
          font-size: 20px;
        }

        .modal {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }

        .modal-content {
          background-color: #fff;
          border-radius: 8px;
          padding: 20px;
          max-width: 300px;
          text-align: center;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .modal-buttons {
          margin-top: 20px;
          display: flex;
          justify-content: space-around;
        }

        .modal-buttons button {
          cursor: pointer;
          border-radius: 20px;
          background-color: var(--btnColor);
          padding: 10px 20px;
        }

        .modal-buttons button:hover {
          background-color: hsl(19, 88%, 45%);
          color: white;
        }
      </style>
    </head>

    <body>
      <div class="fullWidth center">
        <div class="center">
          <h1 id="name"></h1>
          <%- include('partials/listInfo')%>
        </div>

        <div class="listCenter">
          <div class="listContainer">
            <div class="places">
              <h1 class="placeHeader">תחנות</h1>
              <div id="placeList"></div>
            </div>
            <div class="buttons">
              <button id="backButton" class="card-p button">
                <h1 class="textInside">סגירת אימון</h1>
              </button>
              <button id="finishButton" class="card-p button">
                <h1 class="textInside">סיום אימון</h1>
              </button>
            </div>
          </div>
        </div>

        <div id="modal-not-logged-in" class="modal" style="display: none;">
          <div class="modal-content">
            <p style="width: 80%; margin: 0 auto;">כדי להוסיף דירוג לתחנה יש להתחבר לחשבון</p>
            <div class="modal-buttons">
              <button id="close-btn">סגור</button>
              <button id="login-btn">התחברות</button>
            </div>
          </div>
        </div>

      </div>
      <script>
        let userId = null;
        let routeData = null;

        const nameText = document.getElementById("name");
        const placesDiv = document.getElementById("placeList");
        const back = document.getElementById("backButton");
        const finish = document.getElementById("finishButton");

        const locationPin = () => {
          return `
                <svg class="locationPin" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                    <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>
                </svg>
            `;
        };

        const formulateDistance = (distanceMeters) => {
          if (distanceMeters >= 1000) {
            const km = (distanceMeters / 1000).toFixed(1);
            return `${km} ק"מ`;
          } else {
            return `${Math.round(distanceMeters)} מ'`;
          }
        };

        const line = (index) => {
          const distances = JSON.parse(sessionStorage.getItem("distances")) || [];
          const distance = distances[index] || 0;
          return `
                <div class="linecontainer">
                    <div class="line"></div>
                    <h1 class="distanceText">${formulateDistance(distance)}</h1>
                </div>
            `;
        };

        const placeDiv = (place, index, isLastPlace) => {
          return `
                <div class="place" data-index="${index}">
                    <button class="completeButton" onclick="toggleCompleted(${index})">
                      <span class="buttonText">סיימתי</span>
                      <i class="fa fa-check-circle completionIcon" aria-hidden="true"></i> 
                    </button>
                    <div class="card-p" onclick="toggleDetails(${index})">
                        <h1 class="textInside">${place.name}</h1>
                    </div>
                    ${locationPin()}
                    ${!isLastPlace ? line(index) : ""} 
                </div>

                <div class="details" id="details-${index}" style="display: none;">
                  ${place.description ? `<p><strong>תיאור:</strong> ${place.description}</p>` : ""}
                  ${place.img ? `<img src="${place.img}" alt="${place.name}" class="place-image">` : ""}
                  ${place.youtube ? `<iframe src="${place.youtube}" class="place-video" frameborder="0" allowfullscreen></iframe>` : ""}
                  
                  <div id="rating-section-${index}" class="rating-section">
                    <div id="div-average-rating-${index}" class="div-average-rating" style="display: none;">
                      <span id="average-rating-${index}">0</span>
                      <label for="average-rating"><strong>:דירוג משתמשים</strong></label>
                    </div>
                    <div id="rating-container-${index}" class="rating-container">
                      <button id="rate-button-${index}" class="rate-button">דירוג</button>
                    </div>
                  </div>
                </div>   
                
                <div id="modal-rating-${index}" class="modal" style="display: none;">
                  <div class="modal-content">
                    <div id="stars-container-modal-${index}">
                      <span class="star" data-value="1">☆</span>
                      <span class="star" data-value="2">☆</span>
                      <span class="star" data-value="3">☆</span>
                      <span class="star" data-value="4">☆</span>
                      <span class="star" data-value="5">☆</span>
                    </div>
                    <div class="modal-buttons">
                      <button id="cancel-btn-${index}">ביטול</button>
                      <button id="rate-btn-${index}">דרג</button>
                    </div>
                  </div>
                </div>
            `;
        };

        function toggleCompleted(index) {
          const placeDiv = document.querySelector(`.place[data-index="${index}"] .card-p`);
          const button = document.querySelector(`.place[data-index="${index}"] .completeButton`);

          if (placeDiv && button) {
            placeDiv.classList.toggle('completed');
            button.classList.toggle('active');

            console.log(`Completed status for place ${index}: ${placeDiv.classList.contains('completed')}`);
          } else {
            console.error(`Could not find place div for index ${index}`);
          }
        }

        function toggleDetails(index) {
          const detailsDiv = document.getElementById(`details-${index}`);
          const placeDiv = document.querySelector(`.place[data-index="${index}"]`);

          const lineContainer = placeDiv.querySelector('.linecontainer');

          if (detailsDiv.style.display === "none" || !detailsDiv.style.display) {
            detailsDiv.style.display = "block";
            placeDiv.classList.add('expanded');
            const detailsHeight = detailsDiv.offsetHeight;
            lineContainer.style.height = `calc(var(--cardSpacing) + var(--cardHeight) - var(--pinSize) + ${detailsHeight}px)`;
          } else {
            detailsDiv.style.display = "none";
            placeDiv.classList.remove('expanded');
            lineContainer.style.height = `calc(var(--cardSpacing) + var(--cardHeight) - var(--pinSize))`;
          }
        }

        const addToView = (data) => {
          nameText.textContent = data.name;

          data.places.forEach((place, index) => {
            const isLastPlace = index === data.places.length - 1;

            placesDiv.insertAdjacentHTML("beforeend", placeDiv(place, index, isLastPlace));

            const ratingContainer = document.querySelector(`#rating-container-${index}`);
            const starsContainer = document.querySelector(`#stars-container-modal-${index}`);
            const rateButton = document.querySelector(`#rate-button-${index}`);
            const averageRatingElement = document.querySelector(`#average-rating-${index}`);
            const averageRatingDiv = document.querySelector(`#div-average-rating-${index}`);

            let selectedStars = 0;

            const highlightStars = (count) => {
              const stars = starsContainer.querySelectorAll(".star");
              stars.forEach((star, starIndex) => {
                star.textContent = starIndex < count ? "★" : "☆";
              });
            };

            const changeLineHeight = () => {
              if (!isLastPlace) {
                const placeDiv = document.querySelector(`.place[data-index="${index}"]`);
                const lineContainer = placeDiv.querySelector('.linecontainer');
                const ratingSection = document.getElementById(`rating-section-${index}`);

                const ratingSectionHeight = ratingSection.offsetHeight > 0 ? ratingSection.offsetHeight : 0;
                lineContainer.style.height = `calc(var(--cardSpacing) + var(--cardHeight) - var(--pinSize) + ${ratingSectionHeight}px)`;
              }
            }

            const modalRating = document.getElementById(`modal-rating-${index}`);
            const modalNotLoggedIn = document.getElementById("modal-not-logged-in");

            function showModal() {
              if (userId) {
                modalRating.style.display = "flex";
                const userRatingObj = place.ratings.find(rating => rating.userId === userId);
                if (userRatingObj) {
                  selectedStars = userRatingObj.stars;
                  highlightStars(selectedStars);
                }
              } else {
                modalNotLoggedIn.style.display = "flex";
              }
            }

            const closeModalRating = document.getElementById(`cancel-btn-${index}`);
            const closeModalNotLoggedIn = document.getElementById("close-btn");

            closeModalRating.addEventListener("click", () => modalRating.style.display = "none");
            closeModalNotLoggedIn.onclick = () => modalNotLoggedIn.style.display = "none";

            changeLineHeight();

            const updateRatingDisplay = (averageRating) => {
              if (averageRating > 0) {
                averageRatingDiv.style.display = "flex";

                averageRatingElement.textContent = '';

                const iconElement = document.createElement('span');
                iconElement.classList.add('material-symbols-outlined');
                iconElement.textContent = 'hotel_class';

                const ratingText = document.createTextNode(` ${averageRating} / 5`);

                averageRatingElement.appendChild(iconElement);
                averageRatingElement.appendChild(ratingText);

                changeLineHeight();
              } else {
                averageRatingDiv.style.display = "none";
                changeLineHeight();
              }
            };

            updateRatingDisplay(place.averageRating.toFixed(1));

            starsContainer.addEventListener("click", (event) => {
              const value = parseInt(event.target.dataset.value);
              if (!value || value === selectedStars) {
                selectedStars = 0;
                highlightStars(0);
              } else {
                selectedStars = value;
                highlightStars(value);
              }
            });

            document.getElementById(`rate-button-${index}`).onclick = showModal;

            document.getElementById("login-btn").onclick = function () {
              window.location.href = "/login";
            };

            const rateButtonModal = document.getElementById(`rate-btn-${index}`);

            rateButtonModal.addEventListener("click", async () => {
              try {
                const response = await fetch(`/api/v1/places/rate/${place._id}`, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({ stars: selectedStars }),
                });

                if (response.ok) {
                  const updatedPlace = await response.json();
                  alert("הדירוג נשמר בהצלחה!");
                  updateRatingDisplay(updatedPlace.averageRating.toFixed(1));
                  modalRating.style.display = "none";

                  changeLineHeight();
                } else {
                  throw new Error("Failed to save rating");
                }
              }
              catch (error) {
                console.error("Error submitting rating:", error);
                alert("שגיאה בשמירת הדירוג");
              }
            });

          })
        };

        back.addEventListener("click", () => {
          window.location.href = `/map?id=${ID}`;
        });

        finish.addEventListener("click", () => {

          let calories = routeData.calories;
          let neighborhoodId = routeData.neighborhood._id;

          $.ajax({
            url: `/api/v1/neighborhoods/calories/${neighborhoodId}`,
            method: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify({ caloriesToAdd: calories }),
            success: function () {
              console.log(`Successfully updated burned calories for neighborhood ID: ${neighborhoodId}`);
            },
            error: function (xhr, status, error) {
              console.error('Error updating burned calories for neighborhood:', error);
              alert(`Error updating burned calories for neighborhood: ${xhr.responseText || status}`);
            }
          });

          if (userId) {
            $.ajax({
              url: `/api/v1/users/calories/${userId}`,
              method: 'PUT',
              contentType: 'application/json',
              data: JSON.stringify({ caloriesToAdd: calories }),
              success: function () {
                console.log(`Successfully updated burned calories for user ID: ${userId}`);
              },
              error: function (xhr, status, error) {
                console.error('Error updating burned calories for user:', error);
                alert(`Error updating burned calories for user: ${xhr.responseText || status}`);
              }
            });
            window.location.href = "/MyWorkouts";
          }
          else{
            window.location.href = "/chooseRoute";
          }

        });

        const checkAuthStatus = async () => {
          try {
            const response = await fetch("/api/v1/auth/");

            if (response.ok) {
              const data = await response.json();
              console.log("User authenticated:", data);

              userId = data._id;
              console.log(data);

            } else if (response.status === 401) {
              console.log("No user is logged in.");
            }
          } catch (error) {
            console.log("Error fetching auth status:", error);
          }
        }

        const initializePage = async () => {
          try {
            await checkAuthStatus();

            routeData = await fetchRoute();
            addToView(routeData);
            console.log(userId);
          } catch (error) {
            console.error("Error initializing page:", error);
          }
        };

        initializePage();

      </script>
    </body>

</html>