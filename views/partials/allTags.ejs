<style>
    /* tags section */
    #allTagsSection {
        display: none;
        /* Initially hidden */
        height: 380px;
        /* Set initial height to 0 */
        opacity: 0;
        /* Set initial opacity to 0 */
        transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;
        /* Smooth transition */
    }
    
    #allTagsSection.show {
        display: block;
        max-height: 800px;
        /* Max height large enough to contain the content */
        opacity: 1;
        /* Fully visible */
    }
    
    .tagCategory {
        font-size: 1.5rem;
        margin: 10px 0;
        width: 100%;
        display: flex;
        text-align: right;
        flex-direction: column;
        align-content: right;
    }
    .tagPadding{
        padding: 0 var(--tagPadding);
        width: calc(100% / var(--tagsInRow));
        flex-shrink: 0;
        height: 60px;
        margin-bottom: 3px;
    }
    .tagCard {
        cursor: pointer;

        width: 100%;
        height: 100%;

        border-radius: 30px;
        background: #6c757d;

        display:flex;
        align-content: center;
        justify-content: center;
    }
    .tagText{
        text-align: center;
        color: white;
        padding: 10px;
        font-size: 1rem;
        font-weight: 400;
        height: fit-content;
        margin: auto;
    }
    .categoryName{
        font-size: 1.7rem
    }
    .tagsDivider {
        overflow-x: visible;
        width: 100%; 
        margin: 30px 0; 
        height: 3px !important;
    }
</style>

<div class="col-12 mx-auto text-center" id="allTagsSection"> 
    
</div>


<script>
    const ORIGIN = window.location.origin;
    const tagsURL = `${ORIGIN}/api/v1/tags`;
    
    const tagCategories = {
        // "סוג": {
        //     id:"type",
        // },
        // "אזור": {
        //     id:"area",
        // },
        "שכונות":{
            id:"hoods"
        }
    }
    
    const makeContainers = () => {
        for(const [category, { id }] of Object.entries(tagCategories)){
            allTagsSection.innerHTML += `
                <div class="tagCategory">
                    <h3 class="categoryName">${category === "שכונות" ? "שכונה" : category}</h3>
                    <div class="cardContainer" id=${id}>
                    </div>
                </div>
            `
        }
        allTagsSection.innerHTML += `
            <hr class="tagsDivider">
        `
    }
    
    const makeTagCards = (allTags) => {
        for(const tag of allTags){ 
            if(tag.category.for !== "Route") continue;
            
            const container = document.getElementById(tagCategories[tag.category.name]?.id)
            
            if(!container) continue;
            
            const div = document.createElement("div");
            
            div.classList.add("tagPadding");
            div.onclick = () => filterByTag(tag);
            
            div.innerHTML += `
                <div class="tagCard">
                    <h5 class="tagText">${tag.name}</h5>
                </div>
            `   
            container.appendChild(div)
        }    
    }
    
    const fetchTags = async () => {
        try{
            const response = await fetch(tagsURL)
            
            if(!response.ok){
                throw new Error("Response is not ok")
            }
            
            const data = await response.json()
            return data
        } catch(error){
            console.error('Error fetching tags:', error)
        }
    }
    
    const initTags = async () => {
        makeContainers();
        const allTags = await fetchTags();
        makeTagCards(allTags);
    }
    initTags()
</script>